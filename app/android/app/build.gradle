def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def secretProperties =  new Properties()
def secretPropertiesFile = rootProject.file('secret.properties')
if(secretPropertiesFile.exists()) {
    secretPropertiesFile.withReader('UTF-8') { reader ->
        secretProperties.load(reader)
    }
}

def keystoreFile = secretProperties.getProperty('store.file')
if(keystoreFile == null) {
     throw new GradleException("Keystore file not found")
}

def keystorePassword = secretProperties.getProperty('store.password')
if(keystorePassword == null) {
    keystorePassword = ""
}

def keyAliasValue = secretProperties.getProperty('key.alias')
if(keyAliasValue == null) {
    keyAliasValue = ""
}

def keyPasswordValue = secretProperties.getProperty('key.password') 
if(keyPasswordValue == null) {
    keyPasswordValue = ""
}

apply plugin: 'com.android.application'
// START: FlutterFire Configuration
apply plugin: 'com.google.gms.google-services'
// END: FlutterFire Configuration
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }


    defaultConfig {
        applicationId "com.litedevs.pathika.android"
        minSdkVersion 23
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        releaseConfig {
            storeFile file(keystoreFile)
            storePassword keystorePassword
            keyAlias keyAliasValue
            keyPassword keyPasswordValue
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.releaseConfig
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
        }
    }
    buildToolsVersion '33.0.1'
    lint {
        disable 'InvalidPackage'
    }
    namespace 'com.litedevs.pathika'
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.5.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.google.firebase:firebase-analytics:21.2.0'
}

