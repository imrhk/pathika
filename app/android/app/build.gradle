plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def secretProperties =  new Properties()
def secretPropertiesFile = rootProject.file('secret.properties')
if(secretPropertiesFile.exists()) {
    secretPropertiesFile.withReader('UTF-8') { reader ->
        secretProperties.load(reader)
    }
}

def keystoreFile = secretProperties.getProperty('store.file')
if(keystoreFile == null) {
     throw new GradleException("Keystore file not found")
}

def keystorePassword = secretProperties.getProperty('store.password')
if(keystorePassword == null) {
    keystorePassword = ""
}

def keyAliasValue = secretProperties.getProperty('key.alias')
if(keyAliasValue == null) {
    keyAliasValue = ""
}

def keyPasswordValue = secretProperties.getProperty('key.password') 
if(keyPasswordValue == null) {
    keyPasswordValue = ""
}

android {
    namespace = "com.litedevs.pathika"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "25.1.8937393"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = 17
    }

    defaultConfig {
        applicationId = "com.litedevs.pathika.android"
        minSdk = Math.max(flutter.minSdkVersion,23)
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        releaseConfig {
            storeFile file(keystoreFile)
            storePassword keystorePassword
            keyAlias keyAliasValue
            keyPassword keyPasswordValue
            v2SigningEnabled true
        }
    }

    buildTypes {
        release {
            signingConfig = signingConfigs.releaseConfig
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug"
        }
    }

    lint {
        disable 'InvalidPackage'
    }

}

flutter {
    source = "../.."
}
